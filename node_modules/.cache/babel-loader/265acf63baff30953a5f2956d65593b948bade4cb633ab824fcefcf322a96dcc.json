{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCQIV-ZZImuYc13GxmGMIKNKxkmUUHi_tM\",\n  authDomain: \"crwn-clothing-db-39300.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-39300\",\n  storageBucket: \"crwn-clothing-db-39300.appspot.com\",\n  messagingSenderId: \"184189864604\",\n  appId: \"1:184189864604:web:b427018377274acd4cfb59\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  console.log(userDocRef);\n  const userSnapshot = await getDoc(userDocRef);\n  console.log(userSnapshot);\n  if (!userSnapshot.exists()) {\n    //Does not exist\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","additionalInformation","arguments","length","undefined","userDocRef","uid","console","log","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback"],"sources":["/Users/gary/Desktop/crwn-clothing/src/utils/firebase/firebase.utils.js"],"sourcesContent":["\nimport { initializeApp } from 'firebase/app';\nimport { \n  getAuth, \n  signInWithPopup, \n  GoogleAuthProvider, \n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n } from 'firebase/auth';\n\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCQIV-ZZImuYc13GxmGMIKNKxkmUUHi_tM\",\n    authDomain: \"crwn-clothing-db-39300.firebaseapp.com\",\n    projectId: \"crwn-clothing-db-39300\",\n    storageBucket: \"crwn-clothing-db-39300.appspot.com\",\n    messagingSenderId: \"184189864604\",\n    appId: \"1:184189864604:web:b427018377274acd4cfb59\"\n  };\n  \n  // Initialize Firebase\n  const firebaseApp = initializeApp(firebaseConfig);\n\n  const googleProvider = new GoogleAuthProvider();\n  \n  googleProvider.setCustomParameters({\n    prompt: 'select_account',\n  });\n\n\n  export const auth = getAuth();\n  export const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\n\n  export const db = getFirestore();\n\n  export const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\n    if (!userAuth) return;\n\n    const userDocRef = doc(db, 'users', userAuth.uid);\n    console.log(userDocRef);\n\n    const userSnapshot = await getDoc(userDocRef);\n    console.log(userSnapshot);\n\n    if(!userSnapshot.exists()) {\n        //Does not exist\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await setDoc(userDocRef, {\n                displayName,\n                email,\n                createdAt,\n                ...additionalInformation,\n            });\n        } catch(error) {\n            console.log('error creating the user', error.message)\n        }\n    }\n\n    return userDocRef;\n  }\n\n  export const createAuthUserWithEmailAndPassword = async (email, password) => {\n    if (!email || !password) return;\n\n    return await createUserWithEmailAndPassword(auth, email, password);\n  }\n\n  export const signInAuthUserWithEmailAndPassword = async (email, password) => {\n    if (!email || !password) return;\n\n    return await signInWithEmailAndPassword(auth, email, password);\n  }\n\n  export const signOutUser = async() => await signOut(auth);\n\n  export const onAuthStateChangedListener = (callback) => onAuthStateChanged(auth, callback);"],"mappings":"AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,eAAe,EACfC,kBAAkB,EAClBC,8BAA8B,EAC9BC,0BAA0B,EAC1BC,OAAO,EACPC,kBAAkB,QACZ,eAAe;AAEvB,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;;AAEtE;AACA,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,wCAAwC;EACpDC,SAAS,EAAE,wBAAwB;EACnCC,aAAa,EAAE,oCAAoC;EACnDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGnB,aAAa,CAACY,cAAc,CAAC;AAEjD,MAAMQ,cAAc,GAAG,IAAIjB,kBAAkB,EAAE;AAE/CiB,cAAc,CAACC,mBAAmB,CAAC;EACjCC,MAAM,EAAE;AACV,CAAC,CAAC;AAGF,OAAO,MAAMC,IAAI,GAAGtB,OAAO,EAAE;AAC7B,OAAO,MAAMuB,qBAAqB,GAAGA,CAAA,KAAMtB,eAAe,CAACqB,IAAI,EAAEH,cAAc,CAAC;AAEhF,OAAO,MAAMK,EAAE,GAAGjB,YAAY,EAAE;AAEhC,OAAO,MAAMkB,0BAA0B,GAAG,eAAAA,CAAOC,QAAQ,EAAiC;EAAA,IAA/BC,qBAAqB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACnF,IAAI,CAACF,QAAQ,EAAE;EAEf,MAAMK,UAAU,GAAGvB,GAAG,CAACgB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACM,GAAG,CAAC;EACjDC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;EAEvB,MAAMI,YAAY,GAAG,MAAM1B,MAAM,CAACsB,UAAU,CAAC;EAC7CE,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;EAEzB,IAAG,CAACA,YAAY,CAACC,MAAM,EAAE,EAAE;IACvB;IACA,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGZ,QAAQ;IACvC,MAAMa,SAAS,GAAG,IAAIC,IAAI,EAAE;IAE5B,IAAI;MACA,MAAM9B,MAAM,CAACqB,UAAU,EAAE;QACrBM,WAAW;QACXC,KAAK;QACLC,SAAS;QACT,GAAGZ;MACP,CAAC,CAAC;IACN,CAAC,CAAC,OAAMc,KAAK,EAAE;MACXR,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEO,KAAK,CAACC,OAAO,CAAC;IACzD;EACJ;EAEA,OAAOX,UAAU;AACnB,CAAC;AAED,OAAO,MAAMY,kCAAkC,GAAG,MAAAA,CAAOL,KAAK,EAAEM,QAAQ,KAAK;EAC3E,IAAI,CAACN,KAAK,IAAI,CAACM,QAAQ,EAAE;EAEzB,OAAO,MAAMzC,8BAA8B,CAACmB,IAAI,EAAEgB,KAAK,EAAEM,QAAQ,CAAC;AACpE,CAAC;AAED,OAAO,MAAMC,kCAAkC,GAAG,MAAAA,CAAOP,KAAK,EAAEM,QAAQ,KAAK;EAC3E,IAAI,CAACN,KAAK,IAAI,CAACM,QAAQ,EAAE;EAEzB,OAAO,MAAMxC,0BAA0B,CAACkB,IAAI,EAAEgB,KAAK,EAAEM,QAAQ,CAAC;AAChE,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAW,MAAMzC,OAAO,CAACiB,IAAI,CAAC;AAEzD,OAAO,MAAMyB,0BAA0B,GAAIC,QAAQ,IAAK1C,kBAAkB,CAACgB,IAAI,EAAE0B,QAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}